tablesData = """
    DROP TABLE IF EXISTS Dimensions;
    CREATE TABLE Dimensions ( TenantName TEXT, DimensionName TEXT NOT NULL, DimensionDescription TEXT, DimensionType TEXT); 
    DROP TABLE IF EXISTS DimAttributes;
    CREATE TABLE DimAttributes (TenantName TEXT, DimensionName TEXT, AttributeName TEXT, Description TEXT, KeyColumnDataType TEXT, IsKey TEXT, SeedTags TEXT);
    DROP TABLE IF EXISTS DimAttrProperties;
    CREATE TABLE DimAttrProperties (TenantName TEXT, DimensionName TEXT, AttributeName TEXT, PropertyName TEXT, Description TEXT, KeyColumnDataType TEXT);
    DROP TABLE IF EXISTS DimAttrTranslations;
    CREATE TABLE DimAttrTranslations (TenantName TEXT, DimensionName TEXT, AttributeName TEXT, TranslationName TEXT, Description TEXT, LCID INTEGER, Language TEXT);
    DROP TABLE IF EXISTS DimAttrPropTranslations;
    CREATE TABLE DimAttrPropTranslations (TenantName TEXT, DimensionName TEXT, AttributeName TEXT, PropertyName TEXT, TranslationName TEXT, Description TEXT, LCID INTEGER, Language TEXT);
    DROP TABLE IF EXISTS DimHierarchies;
    CREATE TABLE DimHierarchies (TenantName TEXT, DimensionName TEXT, HierarchyName TEXT, HierarchyDescription TEXT);
    DROP TABLE IF EXISTS DimHierLevels;
    CREATE TABLE DimHierLevels (TenantName TEXT, DimensionName TEXT, HierarchyName TEXT, 
    LevelPosition TEXT, LevelName TEXT, LevelDescription TEXT);
    DROP TABLE IF EXISTS Graphs;
    CREATE TABLE Graphs (TenantName TEXT, RelationshipTypeName TEXT, RelationshipTypeDescription TEXT);
    DROP TABLE IF EXISTS GraphEdges;
    CREATE TABLE GraphEdges (TenantName TEXT, RelationshipTypeName TEXT, PropertyName TEXT, PropertyDescription TEXT, PropertyDataType TEXT, AggregateFunction TEXT, IsEditable TEXT, FormatString TEXT);
    DROP TABLE IF EXISTS GraphEdgeTranslations;
    CREATE TABLE GraphEdgeTranslations (TenantName TEXT, RelationshipTypeName TEXT, EdgeName TEXT, 
    PropertyName TEXT, PropertyDescription TEXT, LCID INTEGER, Language TEXT);
    DROP TABLE IF EXISTS GraphFromNodes;
    CREATE TABLE GraphFromNodes (TenantName TEXT, RelationshipTypeName TEXT, DimensionName TEXT, AttributeName TEXT);
    DROP TABLE IF EXISTS GraphNodeTranslations;
    CREATE TABLE GraphNodeTranslations (TenantName TEXT, RelationshipTypeName TEXT, 
    DimensionName TEXT, AttributeName TEXT, IsTailNode TEXT, TransAttributeName TEXT, Description TEXT, 
    LCID INTEGER, Language TEXT);
    DROP TABLE IF EXISTS GraphToNodes;
    CREATE TABLE GraphToNodes (TenantName TEXT, RelationshipTypeName TEXT, DimensionName TEXT, AttributeName TEXT);
    DROP TABLE IF EXISTS NodeCombos;
    CREATE TABLE NodeCombos (TenantName TEXT, NodePropertyId TEXT, DimensionName TEXT, AttributeName TEXT, StringID TEXT);
    DROP TABLE IF EXISTS NodeCombosConditionalFormats;
    CREATE TABLE NodeCombosConditionalFormats (TenantName TEXT, NodePropertyId TEXT, PropertyName TEXT, RelationshipTypeName TEXT,
    PropertyDescription TEXT, PropertyDataType TEXT, PropertyDataSize TEXT, PropertyFormula TEXT, IsTailNode TEXT, StringID TEXT);
    DROP TABLE IF EXISTS Picklists;
    CREATE TABLE Picklists (TenantName TEXT, PickListName TEXT, PickListDescription TEXT, DataType TEXT, IsMultiSelectAllowed TEXT);
    DROP TABLE IF EXISTS PickListValues;
    CREATE TABLE PickListValues (TenantName TEXT, PickListName TEXT, Value TEXT, DisplayName TEXT, DisplayPosition INTEGER);
    DROP TABLE IF EXISTS Plans;
    CREATE TABLE Plans (TenantName TEXT, PlanName TEXT, PlanDescription TEXT);   
    DROP TABLE IF EXISTS NamedSets;
    CREATE TABLE NamedSets (TenantName TEXT, RuleFileName TEXT, SetName TEXT, Definition TEXT, Description TEXT);
    DROP TABLE IF EXISTS MeasureGroups;
    CREATE TABLE MeasureGroups (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureGroupDescription TEXT, GranularityAsSingleString TEXT);   
    DROP TABLE IF EXISTS MeasureGrpGranularity;
    CREATE TABLE MeasureGrpGranularity (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, DimensionName TEXT, AttributeName TEXT, SortOrder INTEGER);
    DROP TABLE IF EXISTS MeasureGrpExternalConfigs;
    CREATE TABLE MeasureGrpExternalConfigs (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, NeedsRedeployment TEXT, 
    DeploymentStatus TEXT, MaintainLocalCache TEXT, DeploymentStatusMessage TEXT, ExternalConfigJson TEXT, DataSourceType TEXT);
    DROP TABLE IF EXISTS MeasureGroupAsGraphGranularities;
    CREATE TABLE MeasureGroupAsGraphGranularities (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, DimensionName TEXT, AttributeName TEXT, IsTailNode TEXT);   
    DROP TABLE IF EXISTS Measures;
    CREATE TABLE Measures (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureName TEXT, MeasureColumnName TEXT, MeasureDescription TEXT, Tags TEXT, AggregateFunction TEXT, 
    DataType TEXT, FormatString TEXT, IsEditable TEXT, IsReportingMeasure TEXT, MeasureType TEXT, AssociationAsGraph TEXT, ToolTip TEXT, 
    ValidationFormula TEXT, ValidationTooltip TEXT, UsedAsIBPLCount INTEGER, UsedAsNonIBPLCount INTEGER, TotalUsageCount INTEGER, ConversionFormula TEXT, ApplyConversion TEXT);
    DROP TABLE IF EXISTS MeasureConditionalFormats;
    CREATE TABLE MeasureConditionalFormats (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureName TEXT, MeasureDescription TEXT, 
    BgColorFormula TEXT, FgColorFormula TEXT, TrendFormula TEXT, FormattingViewModel TEXT);
    DROP TABLE IF EXISTS MeasurePickLists;
    CREATE TABLE MeasurePickLists (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureName TEXT, MeasureDescription TEXT, AggregateFunction TEXT, DataType TEXT, 
    FormatString TEXT, IsEditable TEXT, MeasureType TEXT, PickListName TEXT);
    DROP TABLE IF EXISTS MeasureFormulae;
    CREATE TABLE MeasureFormulae (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureName TEXT, MeasureDescription TEXT, AggregateFunction TEXT, DataType TEXT, 
    FormatString TEXT, IsEditable TEXT, MeasureType TEXT, MeasureFormula TEXT);
    DROP TABLE IF EXISTS MeasureSpreads;
    CREATE TABLE MeasureSpreads (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureName TEXT, BasisMeasureName TEXT, BasisMeasureType TEXT, SpreadingType TEXT);
    DROP TABLE IF EXISTS MeasureTranslations;
    CREATE TABLE MeasureTranslations (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureName TEXT, TranslationName TEXT, TranslationDesc TEXT, ToolTip TEXT, 
    LCID INTEGER, Language TEXT);
    DROP TABLE IF EXISTS MeasureTwins;
    CREATE TABLE MeasureTwins (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, PrimaryMeasureName TEXT, TwinMeasureName TEXT,
    TwinToPrimaryFormula TEXT, ExternalChangeUpdatesPrimary TEXT);
    DROP TABLE IF EXISTS MeasureStaticPropertiesInfo;
    CREATE TABLE MeasureStaticPropertiesInfo (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, MeasureName TEXT, PropertyName TEXT, PropertyValue TEXT);
    DROP TABLE IF EXISTS ActionButtonRules;
    CREATE TABLE ActionButtonRules (TenantName TEXT, ActionButtonName TEXT, IBPLRulePosition INTEGER, IBPLRule TEXT);
    DROP TABLE IF EXISTS ActionButtonFieldBindings;
    CREATE TABLE ActionButtonFieldBindings (TenantName TEXT, ActionButtonName TEXT, FieldName TEXT, PropertyName TEXT, PropertyValue TEXT);
    DROP TABLE IF EXISTS ActionButtonDataSources;
    CREATE TABLE ActionButtonDataSources (TenantName TEXT, ActionButtonName TEXT, DataSourceName TEXT, IBPLRule TEXT);
    DROP TABLE IF EXISTS ActiveRuleFiles;
    CREATE TABLE ActiveRuleFiles (TenantName TEXT, RuleFileName TEXT, RuleFileDescription TEXT, RuleFilePosition REAL);
    DROP TABLE IF EXISTS ActiveRuleScopeLists;
    CREATE TABLE ActiveRuleScopeLists (TenantName TEXT, RuleFileName TEXT, ScopePosition REAL, ScopeDescription TEXT, ScopeType TEXT, ScopeString TEXT, JSONScopePosition REAL);
    DROP TABLE IF EXISTS ActiveRuleScopeGrains;
    CREATE TABLE ActiveRuleScopeGrains (TenantName TEXT, RuleFileName TEXT, ScopePosition REAL, DimensionName TEXT, LevelAttributeName TEXT, FilterExpression TEXT);
    DROP TABLE IF EXISTS ActiveRuleFormulae;
    CREATE TABLE ActiveRuleFormulae (TenantName TEXT, RuleFileName TEXT, ScopePosition REAL, FormulaPosition REAL, FormulaStatement TEXT, 
    ScopeGrain TEXT, IsEnabled TEXT, JSONFormulaPosition REAL);
    DROP TABLE IF EXISTS ActiveRuleGraphGrains;
    CREATE TABLE ActiveRuleGraphGrains (TenantName TEXT, RuleFileName TEXT, ScopePosition REAL, DimensionName TEXT, LevelAttributeName TEXT, FilterExpression TEXT, NodeType TEXT, RelationshipTypeName TEXT);
    DROP TABLE IF EXISTS ActivePluginDetails;
    CREATE TABLE ActivePluginDetails (TenantName TEXT, RuleFileName TEXT, ScopePosition REAL, PluginPosition REAL, PluginText TEXT, 
    PluginName TEXT, ScopeGrain TEXT, ArgsJSON TEXT, JSONPluginPosition REAL);
    DROP TABLE IF EXISTS Plugins;
    CREATE TABLE Plugins (TenantName TEXT, PluginName TEXT, PluginType TEXT, PluginClass TEXT);
    DROP TABLE IF EXISTS NonRPluginParams;
    CREATE TABLE NonRPluginParams (TenantName TEXT, PluginName TEXT, PluginClass TEXT, ParamName TEXT, ParamValue TEXT, ParamType TEXT);
    DROP TABLE IF EXISTS RGenPluginParams;
    CREATE TABLE RGenPluginParams (TenantName TEXT, PluginName TEXT, VariableName TEXT, Value TEXT);
    DROP TABLE IF EXISTS PythonPluginParams;
    CREATE TABLE PythonPluginParams (TenantName TEXT, PluginName TEXT, VariableName TEXT, Value TEXT);
    DROP TABLE IF EXISTS PySparkPluginParams;
    CREATE TABLE PySparkPluginParams (TenantName TEXT, PluginName TEXT, VariableName TEXT, Value TEXT);
    DROP TABLE IF EXISTS RGenPluginInputTables;
    CREATE TABLE RGenPluginInputTables (TenantName TEXT, PluginName TEXT, VariableName TEXT, MeasureName TEXT);
    DROP TABLE IF EXISTS PythonPluginInputTables;
    CREATE TABLE PythonPluginInputTables (TenantName TEXT, PluginName TEXT, Position TEXT, VariableKey TEXT, Value TEXT);
    DROP TABLE IF EXISTS PySparkPluginInputTables;
    CREATE TABLE PySparkPluginInputTables (TenantName TEXT, PluginName TEXT, Position TEXT, VariableKey TEXT, Value TEXT);
    DROP TABLE IF EXISTS RGenPluginInputQueries;
    CREATE TABLE RGenPluginInputQueries (TenantName TEXT, PluginName TEXT, VariableName TEXT, Query TEXT);
    DROP TABLE IF EXISTS RGenPluginOutputTables;
    CREATE TABLE RGenPluginOutputTables (TenantName TEXT, PluginName TEXT, VariableName TEXT, MeasureName TEXT);
    DROP TABLE IF EXISTS PythonPluginOutputTables;
    CREATE TABLE PythonPluginOutputTables (TenantName TEXT, PluginName TEXT, Position TEXT, VariableKey TEXT, Value TEXT);
    DROP TABLE IF EXISTS PythonPluginOutputMeasures;
    CREATE TABLE PythonPluginOutputMeasures (TenantName TEXT, PluginName TEXT, Type TEXT, MeasureName TEXT);
    DROP TABLE IF EXISTS PySparkPluginOutputTables;
    CREATE TABLE PySparkPluginOutputTables (TenantName TEXT, PluginName TEXT, VariableName TEXT, VariableType TEXT);
    DROP TABLE IF EXISTS PythonPluginSliceKeyTables;
    CREATE TABLE PythonPluginSliceKeyTables (TenantName TEXT, PluginName TEXT, DimensionName TEXT, AttributeName TEXT);
    DROP TABLE IF EXISTS PySparkPluginSliceKeys;
    CREATE TABLE PySparkPluginSliceKeys (TenantName TEXT, PluginName TEXT, DimensionName TEXT, AttributeName TEXT);
    DROP TABLE IF EXISTS RGenPluginSliceTables;
    CREATE TABLE RGenPluginSliceTables (TenantName TEXT, PluginName TEXT, DimensionName TEXT, AttributeName TEXT);
    DROP TABLE IF EXISTS RGenPluginScripts;
    CREATE TABLE RGenPluginScripts (TenantName TEXT, PluginName TEXT, ScriptCode TEXT);
    DROP TABLE IF EXISTS PythonPluginScripts;
    CREATE TABLE PythonPluginScripts (TenantName TEXT, PluginName TEXT, ScriptCode TEXT);
    DROP TABLE IF EXISTS PySparkPluginScripts;
    CREATE TABLE PySparkPluginScripts (TenantName TEXT, PluginName TEXT, ScriptCode TEXT);
    DROP TABLE IF EXISTS RTimePluginParams;
    CREATE TABLE RTimePluginParams (TenantName TEXT, PluginName TEXT, Algorithm TEXT, ParamName TEXT, ParamValue TEXT);
    DROP TABLE IF EXISTS RTimePluginInputs;
    CREATE TABLE RTimePluginInputs (TenantName TEXT, PluginName TEXT, MeasureName TEXT, VariableName TEXT, IsPrimary TEXT);
    DROP TABLE IF EXISTS RTimePluginOutputs;
    CREATE TABLE RTimePluginOutputs (TenantName TEXT, PluginName TEXT, MeasureName TEXT, VariableName TEXT, IsHistorical TEXT);
    DROP TABLE IF EXISTS RTimePluginScripts;
    CREATE TABLE RTimePluginScripts (TenantName TEXT, PluginName TEXT, ScriptCode TEXT);
    DROP TABLE IF EXISTS RTimeSeriesParams;
    CREATE TABLE RTimeSeriesParams (TenantName TEXT, PluginName TEXT, ParamName TEXT, ParamValue TEXT);
    DROP TABLE IF EXISTS TenantPluginDetails;
    CREATE TABLE TenantPluginDetails (TenantName TEXT, PluginName TEXT, PluginClass TEXT, PluginCode TEXT, Description TEXT);
    DROP TABLE IF EXISTS ProcFiles;
    CREATE TABLE ProcFiles (TenantName TEXT, ProcFile TEXT, ProcFileDescription TEXT, ProcFilePosition REAL, JSONProcFilePosition REAL);
    DROP TABLE IF EXISTS Procedures;
    CREATE TABLE Procedures (TenantName TEXT, ProcFile TEXT, ProcName TEXT, ProcDescription TEXT, IsParameterized TEXT, ProcPosition REAL, JSONProcPosition REAL);
    DROP TABLE IF EXISTS ProcParams;
    CREATE TABLE ProcParams (TenantName TEXT, ProcName TEXT, ParamName TEXT, ParamType TEXT, ItemType TEXT);
    DROP TABLE IF EXISTS ProcCodes;
    CREATE TABLE ProcCodes (TenantName TEXT, ProcName TEXT, ProcCode TEXT);
    DROP TABLE IF EXISTS Workspaces;
    CREATE TABLE Workspaces (TenantName TEXT, WorkspaceName TEXT, WorkspaceTitle TEXT, WorkspacePosition INTEGER, WorkspaceIsHidden TEXT, JSONWorkspacePosition REAL, Roles TEXT);
    DROP TABLE IF EXISTS PageGroups;
    CREATE TABLE PageGroups (TenantName TEXT, WorkspaceName TEXT, PageGroupName TEXT,PageGroupTitle TEXT, PageGroupDisplayOrder INTEGER);
    DROP TABLE IF EXISTS Pages;
    CREATE TABLE Pages (TenantName TEXT, WorkspaceName TEXT, PageGroupName TEXT, PageName TEXT, PageTitle TEXT, PageDisplayOrder INTEGER, PageIsDefault TEXT);
    DROP TABLE IF EXISTS Views;
    CREATE TABLE Views (TenantName TEXT, WorkspaceName TEXT, PageGroupName TEXT, PageName TEXT, ViewName TEXT, ViewTitle TEXT, ViewPosition INTEGER, ViewIsDefault TEXT, Roles TEXT);
    DROP TABLE IF EXISTS WebLayoutPageWidgets;
    CREATE TABLE WebLayoutPageWidgets (TenantName TEXT, WorkspaceName TEXT, PageGroupName TEXT, PageName TEXT, Widget TEXT);
    DROP TABLE IF EXISTS WebLayoutViewWidgets;
    CREATE TABLE WebLayoutViewWidgets (TenantName TEXT, Workspace TEXT, Pagegroup TEXT, Page TEXT, View TEXT, WidgetName TEXT, WidgetTitle TEXT, IsAnchor TEXT);
    DROP TABLE IF EXISTS WidgetMeasuresList;
    CREATE TABLE WidgetMeasuresList (TenantName TEXT, WidgetID TEXT, WidgetName TEXT, Type TEXT, MeasureName TEXT, IsVisible TEXT, Formula TEXT, Color TEXT);
    DROP TABLE IF EXISTS WidgetGraphEdgesList;
    CREATE TABLE WidgetGraphEdgesList (TenantName TEXT, WidgetID TEXT, WidgetName TEXT, GraphName TEXT, EdgeName TEXT);
    DROP TABLE IF EXISTS ExcelFolders;
    CREATE TABLE ExcelFolders (TenantName TEXT, FolderName TEXT, IsPublished TEXT, DisplayOrder INTEGER, IsPrivate TEXT, Roles TEXT, CreatedUserEmail TEXT, ModifiedUserEmail TEXT);
    DROP TABLE IF EXISTS ExcelWorkbooksInFolders;
    CREATE TABLE ExcelWorkbooksInFolders (TenantName TEXT, XLFolder TEXT, XLWorkbook TEXT, DisplayOrder INTEGER, IsPublished TEXT);
    DROP TABLE IF EXISTS ExcelLayoutWidgets;
    CREATE TABLE ExcelLayoutWidgets (TenantName TEXT, XLFolder TEXT, XLWorkbook TEXT, Widget TEXT);
    DROP TABLE IF EXISTS Widgets;
    CREATE TABLE Widgets (TenantName TEXT, WidgetID TEXT, WidgetName TEXT, WidgetType TEXT, IsPrivate TEXT, CreatedUserId TEXT, TileUsageCount INTEGER, ViewUsageCount INTEGER, ExcelUsageCount INTEGER, TotalUsageCount INTEGER);
    DROP TABLE IF EXISTS WorkspaceTranslations;
    CREATE TABLE WorkspaceTranslations (TenantName TEXT, Name TEXT, GId TEXT, LCId INTEGER, TranslatedName TEXT);
    DROP TABLE IF EXISTS PageGroupTranslations;
    CREATE TABLE PageGroupTranslations (TenantName TEXT, Name TEXT, GId TEXT, LCId INTEGER, TranslatedName TEXT);
    DROP TABLE IF EXISTS PageTranslations;
    CREATE TABLE PageTranslations (TenantName TEXT, Name TEXT, GId TEXT, LCId INTEGER, TranslatedName TEXT);
    DROP TABLE IF EXISTS ViewTranslations;
    CREATE TABLE ViewTranslations (TenantName TEXT, Name TEXT, GId TEXT, LCId INTEGER, TranslatedName TEXT);
    DROP TABLE IF EXISTS ViewWidgetTranslations;
    CREATE TABLE ViewWidgetTranslations (TenantName TEXT, Name TEXT, GId TEXT, LCId INTEGER, TranslatedName TEXT);
    DROP TABLE IF EXISTS PageWidgetTranslations;
    CREATE TABLE PageWidgetTranslations (TenantName TEXT, Name TEXT, GId TEXT, LCId INTEGER, TranslatedName TEXT);
    DROP TABLE IF EXISTS WidgetLevelAttributes;
    CREATE TABLE WidgetLevelAttributes (TenantName TEXT, WidgetId TEXT, WidgetName TEXT, DimName TEXT, 
    AttributeName TEXT, MemberFilterExpression TEXT, RelationshipType TEXT, EdgeDirection TEXT, IsCurrencyFilter TEXT, 
    IsVisible TEXT, IsAttributeRequired TEXT);
    DROP TABLE IF EXISTS WidgetLevelAttrFilters;
    CREATE TABLE WidgetLevelAttrFilters (TenantName TEXT, WidgetId TEXT, WidgetName TEXT, DimName TEXT, 
    AttributeName TEXT, MemberFilterExpression TEXT, SelectedMembers TEXT, IsSingleSelect TEXT, IsCurrencyFilter TEXT);
    DROP TABLE IF EXISTS WidgetNamedSets;
    CREATE TABLE WidgetNamedSets (TenantName TEXT, WidgetId TEXT, WidgetName TEXT, DimName TEXT, 
    AvailableNamedSetName TEXT, AvailableNamedSetDisplayName TEXT, IsDefault TEXT);
    DROP TABLE IF EXISTS WidgetFilterSharings;
    CREATE TABLE WidgetFilterSharings (TenantName TEXT, WorkspaceName TEXT, PageGroupName TEXT, PageName TEXT, ViewName TEXT, WidgetName TEXT, DimName TEXT, AttributeName TEXT, Scope TEXT, MemberFilterExpression TEXT);
    DROP TABLE IF EXISTS WidgetMeasureFilters;
    CREATE TABLE WidgetMeasureFilters (TenantName TEXT, WidgetId TEXT, WidgetName TEXT, MeasureFilterExpr TEXT, FilterScopeType TEXT);
    DROP TABLE IF EXISTS WidgetAssociationMeasures;
    CREATE TABLE WidgetAssociationMeasures (TenantName TEXT, WidgetId TEXT, WidgetName TEXT, AssocMeasureExpr TEXT);
    DROP TABLE IF EXISTS ModelDependencies;
    CREATE TABLE ModelDependencies (TenantName TEXT, LHSType TEXT, LHS TEXT, RHSType TEXT, RHS TEXT, EntityType TEXT, EntityName TEXT, Scope TEXT, Formula TEXT, NamedSets TEXT, DataUploadType TEXT);
    DROP TABLE IF EXISTS PluginInvocation;
    CREATE TABLE PluginInvocation (TenantName TEXT, EntityType TEXT, EntityName TEXT, PluginName TEXT, PluginCode TEXT);
    DROP TABLE IF EXISTS DimAttrAliases;
    CREATE TABLE DimAttrAliases (TenantName TEXT, DimensionName TEXT, AttributeName TEXT, AliasName TEXT, AliasDescription TEXT);
    DROP TABLE IF EXISTS ActionButtonDetails;
    CREATE TABLE ActionButtonDetails (TenantName TEXT, ActionButtonName TEXT, Tooltip TEXT, ActionButtonType TEXT, 
    Alignment TEXT, IsPopOver TEXT, IsGlobal TEXT, ConfigJson TEXT);
    DROP TABLE IF EXISTS ActionButtonBindingsForWeb;
    CREATE TABLE ActionButtonBindingsForWeb (TenantName TEXT, WorkSpaceName TEXT, PageGroupName TEXT, PageName TEXT, ViewName TEXT, WidgetName TEXT, 
    WidgetTitle TEXT, ActionButtonName TEXT);
    DROP TABLE IF EXISTS ActionButtonBindingsForExcel;
    CREATE TABLE ActionButtonBindingsForExcel (TenantName TEXT, XLFolder TEXT, XLWorkbook TEXT, ActionButtonName TEXT); 
    DROP TABLE IF EXISTS ActionButtonBindingsForWidget;
    CREATE TABLE ActionButtonBindingsForWidget (TenantName TEXT, WidgetName TEXT, ActionButtonName TEXT); 
    DROP TABLE IF EXISTS ExcelActionButtonsForWidget;
    CREATE TABLE ExcelActionButtonsForWidget (TenantName TEXT, WidgetName TEXT, ActionButtonName TEXT, IBPLExpression TEXT, IsBackgroundProcess TEXT);
    DROP TABLE IF EXISTS ActionButtonJSRules;
    CREATE TABLE ActionButtonJSRules (TenantName TEXT, ActionButtonName TEXT, ModuleName TEXT, FunctionName TEXT);  
    DROP TABLE IF EXISTS WidgetNavigationViews;
    CREATE TABLE WidgetNavigationViews (TenantName TEXT, Workspace TEXT, PageGroup TEXT, Page TEXT, View TEXT, 
    WidgetName TEXT, NavTargetWorkSpaceName TEXT, NavTargetPageGroupName TEXT, NavTargetPageName TEXT, NavTargetViewName TEXT); 
    DROP TABLE IF EXISTS WidgetFilterLinkings;
    CREATE TABLE WidgetFilterLinkings (TenantName TEXT, WorkspaceName TEXT, PageGroupName TEXT, PageName TEXT, ViewName TEXT, WidgetName TEXT, DimName TEXT, AttributeName TEXT, Scope TEXT);
    DROP TABLE IF EXISTS WidgetInterDependentMeasures;
    CREATE TABLE WidgetInterDependentMeasures (TenantName TEXT, WidgetId TEXT, WidgetName TEXT, VersionDependentFilter TEXT, InterDependentMeasureName TEXT);
    DROP TABLE IF EXISTS UIDependencies;
    CREATE TABLE UIDependencies (TenantName TEXT, RHSType TEXT, RHS TEXT, EntityType TEXT, EntityName TEXT, DependencyType TEXT, Formula TEXT);
    DROP TABLE IF EXISTS ProcInvocation;
    CREATE TABLE ProcInvocation (TenantName TEXT, EntityType TEXT, EntityName TEXT, ProcName TEXT);
    DROP TABLE IF EXISTS TEMPModelDependencies;
    CREATE TABLE TEMPModelDependencies (TenantName TEXT, LHSType TEXT, LHS TEXT, RHSType TEXT, RHS TEXT, EntityType TEXT, EntityName TEXT, Scope TEXT, Formula TEXT, NamedSets TEXT, DataUploadType TEXT);
    DROP TABLE IF EXISTS TEMPUIDependencies;
    CREATE TABLE TEMPUIDependencies (TenantName TEXT, RHSType TEXT, RHS TEXT, EntityType TEXT, EntityName TEXT, DependencyType TEXT, Formula TEXT);
    DROP TABLE IF EXISTS PluginOutParameterListing;
    CREATE TABLE PluginOutParameterListing (PluginClassName TEXT, OutputParameterName TEXT);
    DROP TABLE IF EXISTS DataSecurityIBPLRules;
    CREATE TABLE DataSecurityIBPLRules (TenantName TEXT, DataSecurityRuleName TEXT, IsActive TEXT, ScriptCode TEXT);
    DROP TABLE IF EXISTS DimAliases;
    CREATE TABLE DimAliases (TenantName TEXT, DimensionName TEXT, AliasName TEXT, AliasDescription TEXT);
    DROP TABLE IF EXISTS WidgetDefinitionProperties;
    CREATE TABLE WidgetDefinitionProperties (TenantName TEXT, WidgetID TEXT, WidgetName TEXT, IsPrivate TEXT, 
    WidgetType TEXT, PropertyName TEXT, PropertyValue TEXT);
    DROP TABLE IF EXISTS WidgetInfoContext;    
    CREATE TABLE WidgetInfoContext (TenantName TEXT, WorkspaceName TEXT, PageGroupName TEXT, 
    PageName TEXT, ViewName TEXT, WidgetName TEXT, MemberInfo TEXT, Title TEXT, UnreadOnly TEXT, 
    MemberIndicator TEXT, LastNDays TEXT, Folders TEXT, IsShowTask TEXT, TaskIndicator TEXT);
    DROP TABLE IF EXISTS MeasureAggregates;    
    CREATE TABLE MeasureAggregates (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, 
    MeasureName TEXT, AggregateFunction TEXT, OrderNumber TEXT, DimensionName TEXT);
    DROP TABLE IF EXISTS MeasureGroupTranslations;    
    CREATE TABLE MeasureGroupTranslations (TenantName TEXT, PlanName TEXT, MeasureGroupName TEXT, 
    MeasureGroupTranslationName TEXT, MeasureGroupTranslationDescription TEXT, Language TEXT);
"""


insertData = """
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Demand Fulfilment Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Total MetOnTime Quantity Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Total Short Quantity Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Total Late Quantity Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Weighted Late Quantity Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Maximum Lateness Buckets Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Commit Date Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Total Time Taken By Demand Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Total Tries Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Total Time Taken By Delay Demand Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Re-Planned By Interactive Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Beginning On Hand Material Quantity Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Ending On Hand Material Quantity Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "WOS For Total Demand Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "WOS For Independent Demand Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Production Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Consumption Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Capacity Consumption Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Storage Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Production Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Production Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Production Constraint Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Overtime1 Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Overtime2 Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Capacity Consumption Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Capacity Consumption Constraint Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Storage Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Storage Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Storage Constraint Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Band1 Storage Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Band2 Storage Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Material Production Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Material Consumption Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Capacity Consumption Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Material Production Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Material Production Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Material Production Constraint Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Material Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Overtime1 Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Overtime2 Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Capacity Consumption Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Capacity Consumption Constraint Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Material Production Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Material Consumption Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Capacity Consumption Plan Measure Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Material Production Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Material Production Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Material Production Constraint Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Material Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Overtime1 Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Overtime2 Capacity Consumption Pegging Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Capacity Consumption Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Capacity Consumption Constraint Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Demand RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material RCA Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Capacity Demand RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Capacity RCA Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Storage Demand RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Storage RCA Constraint Type Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Load Plan Capacity Consumption Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Load Plan Material Production Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Intermediate Material Pegging Input Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Producer To Consumer From Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Producer To Consumer To Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Consumer To Producer From Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Consumer To Producer To Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Consumer To Consumer From Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Consumer To Consumer To Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Producer To Producer From Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Producer To Producer To Pegged Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Material Production OBO RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Capacity Consumption OBO RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Storage Consumption OBO RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Load Plan Capacity Consumption Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Load Plan Material Production Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Plan Material Production Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Plan Material Consumption Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Material Production OBO RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Distribution Capacity Consumption OBO RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Load Plan Capacity Consumption Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Load Plan Material Production Property Name");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Material Production OBO RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("SupplyChainSolver", "Supplier Capacity Consumption OBO RCA Qty Property");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("BosToInventory", "UnitsMeasureName");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("InventoryToBos", "BosMeasureName");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("EndingOnHandPlan", "StartingOnHandMeasureName");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("EndingOnHandPlan", "EndingOnHandMeasureName");
    INSERT INTO PluginOutParameterListing (PluginClassName, OutputParameterName) VALUES ("PeriodToDatePlan", "OutputMeasureName");
"""
